diff --git a/gecko/dom/system/gonk/NetworkUtils.cpp b/gecko/dom/system/gonk/NetworkUtils.cpp
index 64ced69..bed0661 100644
--- a/gecko/dom/system/gonk/NetworkUtils.cpp
+++ b/gecko/dom/system/gonk/NetworkUtils.cpp
@@ -138,40 +138,43 @@ const CommandFunc NetworkUtils::sWifiEnableChain[] = {
   NetworkUtils::tetheringStatus,
   NetworkUtils::startTethering,
   NetworkUtils::setDnsForwarders,
   NetworkUtils::enableNat,
   NetworkUtils::wifiTetheringSuccess
 };
 
 const CommandFunc NetworkUtils::sWifiDisableChain[] = {
   NetworkUtils::clearWifiTetherParms,
+  NetworkUtils::clearAddrs,
   NetworkUtils::stopSoftAP,
   NetworkUtils::stopAccessPointDriver,
   NetworkUtils::wifiFirmwareReload,
   NetworkUtils::untetherInterface,
   NetworkUtils::removeInterfaceFromLocalNetwork,
   NetworkUtils::preTetherInterfaceList,
   NetworkUtils::postTetherInterfaceList,
   NetworkUtils::disableNat,
   NetworkUtils::setIpForwardingEnabled,
   NetworkUtils::stopTethering,
   NetworkUtils::wifiTetheringSuccess
 };
 
 const CommandFunc NetworkUtils::sWifiFailChain[] = {
   NetworkUtils::clearWifiTetherParms,
+  NetworkUtils::clearAddrs,
   NetworkUtils::stopSoftAP,
   NetworkUtils::setIpForwardingEnabled,
   NetworkUtils::stopTethering
 };
 
 const CommandFunc NetworkUtils::sWifiRetryChain[] = {
   NetworkUtils::clearWifiTetherParms,
+  NetworkUtils::clearAddrs,
   NetworkUtils::stopSoftAP,
   NetworkUtils::stopTethering,
 
   // sWifiEnableChain:
   NetworkUtils::wifiFirmwareReload,
   NetworkUtils::startAccessPointDriver,
   NetworkUtils::setAccessPoint,
   NetworkUtils::startSoftAP,
   NetworkUtils::setInterfaceUp,
@@ -642,18 +645,27 @@ void NetworkUtils::createUpStream(CommandChain* aChain,
 
 void NetworkUtils::startSoftAP(CommandChain* aChain,
                                CommandCallback aCallback,
                                NetworkResultOptions& aResult)
 {
   const char* command= "softap startap";
   doCommand(command, aChain, aCallback);
 }
 
+void NetworkUtils::clearAddrs(CommandChain* aChain,
+                              CommandCallback aCallback,
+                              NetworkResultOptions& aResult)
+{
+  char command[MAX_COMMAND_SIZE];
+  snprintf(command, MAX_COMMAND_SIZE - 1, "interface clearaddrs %s", GET_CHAR(mIfname));
+  doCommand(command, aChain, aCallback);
+}
+
 void NetworkUtils::stopSoftAP(CommandChain* aChain,
                               CommandCallback aCallback,
                               NetworkResultOptions& aResult)
 {
   const char* command= "softap stopap";
   doCommand(command, aChain, aCallback);
 }
 
 void NetworkUtils::clearWifiTetherParms(CommandChain* aChain,
@@ -996,18 +1008,28 @@ void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
   // FIXME: (Bug 1121795) We only remove the first gateway to the default route.
   //        For dual stack (ipv4/ipv6) device, one of the gateway would
   //        not be added to the default route.
   snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s 0.0.0.0/0 %s",
                     GET_FIELD(mNetId), GET_CHAR(mIfname), GET_CHAR(mGateways[0]));
 
   doCommand(command, aChain, aCallback);
 }
 
+void NetworkUtils::flushDefaultInterface(CommandChain* aChain,
+                                         CommandCallback aCallback,
+                                         NetworkResultOptions& aResult)
+{
+  char command[MAX_COMMAND_SIZE];
+  snprintf(command, MAX_COMMAND_SIZE - 1, "resolver flushdefaultif");
+
+  doCommand(command, aChain, aCallback);
+}
+
 void NetworkUtils::setInterfaceDns(CommandChain* aChain,
                                    CommandCallback aCallback,
                                    NetworkResultOptions& aResult)
 {
   char command[MAX_COMMAND_SIZE];
   int written;
 
   if (SDK_VERSION >= 20) {
     written = snprintf(command, sizeof command, "resolver setnetdns %d %s",
@@ -1680,18 +1702,19 @@ CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
       return -1;
     }
     aOptions.mNetId = netIdInfo.mNetId;
     runChain(aOptions, COMMAND_CHAIN, setDnsFail);
     return CommandResult::Pending();
   }
   if (SDK_VERSION >= 18) {
     // JB, KK.
     static CommandFunc COMMAND_CHAIN[] = {
+      flushDefaultInterface,
       setDefaultInterface,
       setInterfaceDns,
       defaultAsyncSuccessHandler
     };
     runChain(aOptions, COMMAND_CHAIN, setDnsFail);
     return CommandResult::Pending();
   }
 
   return SUCCESS;
diff --git a/gecko/dom/system/gonk/NetworkUtils.h b/gecko/dom/system/gonk/NetworkUtils.h
index 7e88231..48c75fd 100644
--- a/gecko/dom/system/gonk/NetworkUtils.h
+++ b/gecko/dom/system/gonk/NetworkUtils.h
@@ -342,18 +342,19 @@ private:
                mozilla::dom::NetworkResultOptions& aResult
   static void wifiFirmwareReload(PARAMS);
   static void startAccessPointDriver(PARAMS);
   static void stopAccessPointDriver(PARAMS);
   static void setAccessPoint(PARAMS);
   static void cleanUpStream(PARAMS);
   static void createUpStream(PARAMS);
   static void startSoftAP(PARAMS);
   static void stopSoftAP(PARAMS);
+  static void clearAddrs(PARAMS);
   static void clearWifiTetherParms(PARAMS);
   static void enableAlarm(PARAMS);
   static void disableAlarm(PARAMS);
   static void setQuota(PARAMS);
   static void removeQuota(PARAMS);
   static void setAlarm(PARAMS);
   static void setInterfaceUp(PARAMS);
   static void tetherInterface(PARAMS);
   static void addInterfaceToLocalNetwork(PARAMS);
@@ -364,18 +365,19 @@ private:
   static void tetheringStatus(PARAMS);
   static void stopTethering(PARAMS);
   static void startTethering(PARAMS);
   static void untetherInterface(PARAMS);
   static void removeInterfaceFromLocalNetwork(PARAMS);
   static void setDnsForwarders(PARAMS);
   static void enableNat(PARAMS);
   static void disableNat(PARAMS);
   static void setDefaultInterface(PARAMS);
+  static void flushDefaultInterface(PARAMS);
   static void setInterfaceDns(PARAMS);
   static void wifiTetheringSuccess(PARAMS);
   static void usbTetheringSuccess(PARAMS);
   static void networkInterfaceAlarmSuccess(PARAMS);
   static void updateUpStreamSuccess(PARAMS);
   static void setDhcpServerSuccess(PARAMS);
   static void wifiOperationModeSuccess(PARAMS);
   static void clearAddrForInterface(PARAMS);
   static void createNetwork(PARAMS);
